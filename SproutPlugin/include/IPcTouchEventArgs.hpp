#ifndef IPC_TOUCH_EVENT_ARGS_H
#define IPC_TOUCH_EVENT_ARGS_H

#include "HpPcApi.hpp"
#include "PcPhysicalPoint.hpp"
#include "PcPhysicalSize.hpp"
#include "PcTouchEventType.hpp"

namespace hp { namespace pc {

/// <summary>
/// The IPcTouchEventArgs class defines arguments for the Sprout Platform event that is generated by
/// a touch layer when a user touches the touch-handling area of an enabled touch layer
/// (or moves or raises a finger or stylus), and when the layer state of a touch layer changes.
/// </summary>
/// <remarks>
/// This event is received in the IPcTouchLayerObserver::Updated method.
/// </remarks>
class HPPC_API IPcTouchEventArgs
{
public:
    /// <summary>
    /// Destroys the instance of IPcTouchEventArgs.
    /// </summary>
    virtual ~IPcTouchEventArgs() {}

    /// <summary>
    /// Gets the type of touch event that was generated.
    /// </summary>
    /// <returns>The type of the touch event that was generated</returns>
    virtual PcTouchEventType TouchEventType() const throw () = 0;

    /// <summary>
    /// Gets the touch ID. The touch ID can be used to identify the touch, for example, if several
    /// fingers are touching the mat.
    /// </summary>
    /// <returns>The touch ID</returns>
    virtual int TouchID() const throw () = 0;

    /// <summary>
    /// Gets the coordinates (X,Y) in millimeters of the touch point. The touch point is the center
    /// of the bounding rectangle that bounds the touch.
    /// </summary>
    /// <returns>The PcPhysicalPoint (X, Y coordinates) where the touch occurred</returns>
    virtual const PcPhysicalPoint& TouchPoint() const throw () = 0;

    /// <summary>
    /// Gets the size (Width, Height) in millimeters of the bounding rectangle that bounds the touch.
    /// </summary>
    /// <returns>The PcPhysicalSize (Width, Height) of the bounding rectangle that bounds the touch</returns>
    virtual const PcPhysicalSize& TouchSize() const throw () = 0;

    /// <summary>
    /// Gets the new layer state.
    /// </summary>
    /// <remarks>
    /// The value "true" indicates that the layer is enabled. The value
    /// "false" indicates that the layer is disabled.
    /// </remarks>
    /// <returns>The layer state</returns>
    virtual bool Enabled() const throw () = 0;
};

} }

#endif // IPC_TOUCH_EVENT_ARGS_H
